{"version":3,"sources":["algo.ts","SortingVisualizer/SortingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["bubbleSort","arr","animations","length","i","j","push","temp","insertionSort","current","selectionSort","smallIndex","tmp","mergeSort","extraArr","slice","mergeHelper","startIndex","endIndex","halfIndex","Math","floor","middleIndex","k","merge","heapSort","n","heapify","largest","left","right","quickSort","quickHelper","low","high","pi","pivot","smallerIndex","temp2","partition","SortingVisualizer","props","state","selectedSort","this","generateArr","getRandomInt","setState","tempArr","bubbleTest","insertionTest","selectionTest","mergeTest","heapTest","quickTest","tsSort","sort","arraysEqual","console","log","str","a","b","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","style","height","getInsertionSortAnimations","getSelectionSortAnimations","getMergeSortAnimations","getHeapSortAnimations","getQuickSortAnimations","Navbar","bg","variant","Brand","href","ButtonGroup","toggle","className","ToggleButton","onClick","type","checked","value","Button","map","index","React","Component","min","max","random","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.48650c5b.chunk.js","sourcesContent":["export function getBubbleSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    bubbleSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getInsertionSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    insertionSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getSelectionSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    selectionSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getMergeSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    mergeSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getHeapSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    heapSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getQuickSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    quickSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function bubbleSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for (var i = 0; i < length-1; i++){\r\n        for (var j = 0; j < (length-1-i); j++) {\r\n            // animations.push([j,j])\r\n            // animations.push([j,j+1])\r\n            if (arr[j] > arr[j+1]) {\r\n                animations.push([j ,arr[j+1]])\r\n                animations.push([j+1 ,arr[j]])\r\n                var temp = arr[j]\r\n                arr[j] = arr[j+1]\r\n                arr[j+1] = temp\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function insertionSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for (var i = 1; i < length; i++) {\r\n        const current = arr[i]\r\n        let j = i - 1\r\n        while ((j > -1) && (current < arr[j])) {\r\n            animations.push([j+1, arr[j]])\r\n            arr[j+1] = arr[j];\r\n            j--;\r\n        }\r\n        arr[j+1] = current;\r\n        animations.push([j+1, current])\r\n    }\r\n    return arr;\r\n\r\n}\r\n\r\nexport function selectionSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for(var i = 0; i < length; i++) {\r\n        let smallIndex = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(arr[j] < arr[smallIndex]) {\r\n                smallIndex=j;\r\n            }\r\n         }\r\n        if (smallIndex !== i) {\r\n            // Swapping the elements\r\n            animations.push([i ,arr[smallIndex]])\r\n            animations.push([smallIndex ,arr[i]])\r\n            let tmp = arr[i];\r\n            arr[i] = arr[smallIndex];\r\n            arr[smallIndex] = tmp;\r\n       }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function mergeSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    var extraArr = arr.slice()\r\n    mergeHelper(arr, 0, length - 1, extraArr, animations)\r\n    return animations\r\n}\r\n\r\nfunction mergeHelper(arr: number[], startIndex: number, endIndex: number, extraArr: number[], animations: any) {\r\n    if(startIndex === endIndex) { return }\r\n    const halfIndex = Math.floor((startIndex + endIndex) / 2)\r\n    mergeHelper(extraArr, startIndex, halfIndex, arr, animations)\r\n    mergeHelper(extraArr, halfIndex+ 1, endIndex, arr, animations)\r\n    merge(arr, startIndex, halfIndex, endIndex, extraArr, animations)\r\n}\r\n\r\nfunction merge(arr: number[], startIndex: number, middleIndex: number, endIndex: number, extraArr: number[], animations: any) {\r\n    var k = startIndex, i = startIndex, j = middleIndex + 1\r\n    while (i <= middleIndex && j <= endIndex) {\r\n        if(extraArr[i] <= extraArr[j]) {\r\n            animations.push([k, extraArr[i]])\r\n            arr[k++] = extraArr[i++]\r\n        } else {\r\n            animations.push([k, extraArr[j]])\r\n            arr[k++] = extraArr[j++]\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([k, extraArr[i]])\r\n        arr[k++] = extraArr[i++]\r\n    }\r\n    while (j <= endIndex) {\r\n        animations.push([k, extraArr[j]])\r\n        arr[k++] = extraArr[j++]\r\n    }\r\n}\r\n\r\n// function merge(arr: number[], index1Start: number, index1End: number, index2Start: number, index2End: number, extraArr: number[], animations: number[]) {\r\n//     var newArr = []\r\n//     var k1 = index1Start, k2 = index2Start, k3 = 0\r\n//     while (k1 <= index1End && k2 <= index2End) {\r\n//         var temp = 0\r\n//         if(arr[k1] <= arr[k2]) {\r\n//             temp = arr[k1]\r\n//             k1++\r\n//         } else {\r\n//             temp = arr[k2]\r\n//             k2++\r\n//         }\r\n//         newArr[k3] = temp\r\n//         k3++\r\n//     }\r\n//     while(k2 <= index2End) {\r\n//         newArr.push(arr[k2])\r\n//         k2++\r\n//     }\r\n//     while (k1 <= index1End) {\r\n//         newArr.push(arr[k1])\r\n//         k1++\r\n//     }\r\n//     console.log(\"merged: \" + newArr)\r\n// }\r\n\r\nexport function heapSort(arr: number[], animations: any){\r\n    var n = arr.length\r\n    for(var i = n/2-1; i >= 0; i--) {\r\n        heapify(arr, n, i, animations)\r\n    }\r\n\r\n    for (var k = n - 1; k >= 0; k--) {\r\n        animations.push([0, arr[k]])\r\n        animations.push([k, arr[0]])\r\n        var temp = arr[0]\r\n        arr[0] = arr[k]\r\n        arr[k] = temp\r\n\r\n        heapify(arr, k, 0, animations)\r\n    }\r\n    return arr\r\n}\r\n\r\nfunction heapify(arr: number[], n: number, i: number, animations: any) {\r\n    var largest = i\r\n    var left = 2 * i + 1\r\n    var right = 2 * i + 2\r\n\r\n    if (left < n && arr[largest] < arr[left]) {\r\n        largest = left\r\n    }\r\n     if (right < n && arr[largest] < arr[right]) {\r\n        largest = right\r\n     }\r\n     if (largest !== i) {\r\n        animations.push([largest, arr[i]])\r\n        animations.push([i, arr[largest]])\r\n        var temp = arr[i]\r\n        arr[i] = arr[largest]\r\n        arr[largest] = temp\r\n\r\n        heapify(arr, n, largest, animations)\r\n     }\r\n}\r\n\r\nexport function quickSort(arr: number[], animations: any) {\r\n    var length = arr.length\r\n    quickHelper(arr, 0, length - 1, animations)\r\n    return arr\r\n}\r\n\r\nfunction quickHelper(arr: number[], low: number, high: number, animations: any) {\r\n    if(low < high) {\r\n        var pi = partition(arr, low, high, animations)\r\n        quickHelper(arr, low, pi - 1, animations)\r\n        quickHelper(arr, pi + 1, high, animations)\r\n    }\r\n}\r\n\r\nfunction partition(arr: number[], low: number, high: number, animations: any) {\r\n    var pivot = arr[high]\r\n    var smallerIndex = (low - 1)\r\n\r\n    for(var i = low; i < high ; i++) {\r\n        if(arr[i] < pivot) {\r\n            smallerIndex++\r\n            animations.push([smallerIndex, arr[i]])\r\n            animations.push([i, arr[smallerIndex]])\r\n            var temp = arr[smallerIndex]\r\n            arr[smallerIndex] = arr[i]\r\n            arr[i] = temp\r\n        }\r\n    }\r\n    animations.push([smallerIndex + 1, arr[high]])\r\n    animations.push([high, arr[smallerIndex + 1]])\r\n    var temp2 = arr[smallerIndex + 1]\r\n    arr[smallerIndex + 1] = arr[high]\r\n    arr[high] = temp2\r\n    return (smallerIndex + 1)\r\n}\r\n\r\nfunction getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction randomNumber(min: number, max: number) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function generateArr(arr: number[],numOfElements: number){\r\n    for(var i = 0; i < numOfElements; i ++) {\r\n        arr[i] = getRandomInt(700)\r\n    }\r\n    return arr\r\n}\r\n","import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup, Navbar, ToggleButton } from 'react-bootstrap';\r\nimport { bubbleSort, getBubbleSortAnimations, getInsertionSortAnimations, getSelectionSortAnimations, insertionSort, selectionSort,getMergeSortAnimations, getHeapSortAnimations, getQuickSortAnimations, mergeSort, quickSort, heapSort } from '../algo';\r\nimport './SortingVisualizer.css';\r\nimport Slider from 'react-rangeslider';\r\n\r\ninterface state {\r\n  arr: number[]\r\n  selectedSort: number\r\n}\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nvar NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component <{}, state> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      arr: [],\r\n      selectedSort: 1\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArr()\r\n  }\r\n\r\n  generateArr(){\r\n    const arr = []\r\n    for(var i = 0; i < NUMBER_OF_ARRAY_BARS; i ++) {\r\n        arr.push(getRandomInt(5, 600))\r\n    }\r\n    this.setState({arr})\r\n  }\r\n\r\n  testSortingAlgos(){\r\n    for(var i = 0; i < 100; i++) {\r\n      var tempArr = []\r\n      for(var j = 0; j < 1000; j ++) {\r\n        tempArr.push(getRandomInt(5, 600))\r\n      }\r\n      const bubbleTest = bubbleSort(tempArr, [])\r\n      const insertionTest = insertionSort(tempArr, [])\r\n      const selectionTest = selectionSort(tempArr, [])\r\n      const mergeTest = mergeSort(tempArr, [])\r\n      const heapTest = heapSort(tempArr, [])\r\n      const quickTest = quickSort(tempArr, [])\r\n      const tsSort = tempArr.sort()\r\n      if(this.arraysEqual(tsSort, insertionTest) && this.arraysEqual(tsSort, bubbleTest) && this.arraysEqual(tsSort, selectionTest) && this.arraysEqual(tsSort, mergeTest) && this.arraysEqual(tsSort, heapTest)  && this.arraysEqual(tsSort, quickTest)) {\r\n        console.log(\"All algorithms are working\")\r\n      } else {\r\n        console.log(\"Something went wrong :(\")\r\n      }\r\n    }\r\n    console.log(\"Done Testing\")\r\n  }\r\n\r\n  print(arr: Number[]){\r\n    var str =\"\"\r\n    for(var i = 0; i < arr.length; i++){\r\n      str += \", \" + arr[i]\r\n    }\r\n    console.log(str)\r\n  }\r\n\r\n  arraysEqual(a: number[], b: number[]) {\r\n    if (a === b) return true;\r\n    if (a == null || b == null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (var i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  bubbleSort() {\r\n    var animations = getBubbleSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      // const isColorChange = i % 3 !== 2;\r\n      // if (isColorChange) {\r\n      //   const [barOneIdx, barTwoIdx] = animations[i];\r\n      //   var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n      //   var barTwoStyle = arrayBars[barTwoIdx] as HTMLElement;\r\n      //   const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n      //   setTimeout(() => {\r\n      //     barOneStyle.style.backgroundColor = color;\r\n      //     barTwoStyle.style.backgroundColor = color;\r\n      //   }, i * ANIMATION_SPEED_MS);\r\n      // } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n          barOneStyle.style.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      // }\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  insertionSort() {\r\n    var animations = getInsertionSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  selectionSort() {\r\n    var animations = getSelectionSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  mergeSort() {\r\n    var animations = getMergeSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  heapSort() {\r\n    var animations = getHeapSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  quickSort() {\r\n    var animations = getQuickSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  render() {\r\n    const {arr} = this.state;\r\n    var checked = 1\r\n\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"\">Sorting Algo Visualizer</Navbar.Brand>\r\n          <ButtonGroup toggle className=\"mr-auto\">\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 1})}} type=\"radio\" checked={this.state.selectedSort === 1} variant=\"outline-light\" value={1}>\r\n              Bubble Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 2})}} type=\"radio\" checked={this.state.selectedSort === 2} variant=\"outline-light\" value={2}>\r\n              Selection Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 3})}} type=\"radio\" checked={this.state.selectedSort === 3} variant=\"outline-light\" value={3}>\r\n              Insertion Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 4})}} type=\"radio\" checked={this.state.selectedSort === 4} variant=\"outline-light\" value={4}>\r\n              Merge Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 5})}} type=\"radio\" checked={this.state.selectedSort === 5} variant=\"outline-light\" value={5}>\r\n              Heap Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 6})}} type=\"radio\" checked={this.state.selectedSort === 6} variant=\"outline-light\" value={6}>\r\n              Quick Sort\r\n            </ToggleButton>\r\n          </ButtonGroup>\r\n          <Button variant=\"outline-light\" className=\"mr-2\" onClick = {() => this.generateArr()}>New Array</Button>\r\n          <Button variant=\"outline-light\" onClick = {() => {\r\n            if (this.state.selectedSort === 1) {\r\n              this.bubbleSort()\r\n            } else if (this.state.selectedSort === 2) {\r\n              this.selectionSort()\r\n            } else if (this.state.selectedSort === 3) {\r\n              this.insertionSort()\r\n            } else if (this.state.selectedSort === 4) {\r\n              this.mergeSort()\r\n            } else if (this.state.selectedSort === 5) {\r\n              this.heapSort()\r\n            } else if (this.state.selectedSort === 6) {\r\n              this.quickSort()\r\n            }\r\n          }}>Sort</Button>\r\n        </Navbar>\r\n        <div className=\"array-container\">\r\n          {\r\n            arr.map((value, index) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={index}\r\n                  style={{height: `${value}px`}}\r\n                ></div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\n// import { bubbleSortTemp } from './SortingVisualizer/SortingVisualizer.tsx';\n// import './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, ButtonGroup, Navbar, ToggleButton, Nav } from 'react-bootstrap';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nvar arr = []\n\n// function printSortedArray(){\n//   var arr: number[] = []\n//   arr = generateArr(arr, 10)\n//   // var arr = [0,1,2,4,6,3,7,8,9]\n//   arr = bubbleSort(arr)\n//   for(var i = 0; i < arr.length; i++){\n//     console.log(i +\": \" +arr[i])\n//   }\n// }\n\nfunction App() {\n\n  const radios = [\n    { name: 'Bubble Sort', value: '1' },\n    { name: 'Insertion Sort', value: '2' },\n    { name: 'Selection Sort', value: '3' },\n    { name: 'Merge Sort', value: '4' },\n    { name: 'Heap Sort', value: '5' },\n    { name: 'Quick Sort', value: '6' },\n  ];\n  const [radioValue, setRadioValue] = useState('1');\n  var sort = <SortingVisualizer />;\n  return (\n    <div>\n      {/* <Navbar bg=\"dark\" variant=\"dark\" >\n        <Navbar.Brand href=\"\">Sorting Algo Visualizer</Navbar.Brand>\n        <ButtonGroup toggle>\n          {radios.map((radio, idx) => (\n            <ToggleButton\n              key={idx}\n              type=\"radio\"\n              variant=\"secondary\"\n              name=\"radio\"\n              value={radio.value}\n              checked={radioValue === radio.value}\n              onChange={(e) => setRadioValue(e.currentTarget.value)}\n            >\n              {radio.name}\n            </ToggleButton>\n          ))}\n        </ButtonGroup>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav>\n            <Button variant=\"outline-light\" className=\"mr-2\" onClick = {\n              () => {\n                console.log(\"New array being generated\")\n              }\n            }>New Array</Button>\n\n            <Button variant=\"outline-light\" onClick = {\n              () => {\n                if (radioValue === '1') {\n                  console.log('Bubble Sort')\n                } else if (radioValue === '2') {\n                  console.log('Insertion Sort')\n                } else if (radioValue === '3') {\n                  console.log('Selection Sort')\n                } else if (radioValue === '4') {\n                  console.log('Merge Sort')\n                } else if (radioValue === '5') {\n                  console.log('Heap Sort')\n                } else if (radioValue === '6') {\n                  console.log('Quick Sort')\n                }\n              }\n            }>Sort</Button>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar> */}\n      <SortingVisualizer/>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}