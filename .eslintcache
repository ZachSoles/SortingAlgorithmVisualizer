[{"C:\\Users\\zacso\\documents\\algo-vis\\src\\index.tsx":"1","C:\\Users\\zacso\\documents\\algo-vis\\src\\reportWebVitals.ts":"2","C:\\Users\\zacso\\documents\\algo-vis\\src\\App.tsx":"3","C:\\Users\\zacso\\documents\\algo-vis\\src\\algo.ts":"4","C:\\Users\\zacso\\documents\\algo-vis\\src\\SortingVisualizer\\SortingVisualizer.tsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":2721,"mtime":1611019315586,"results":"9","hashOfConfig":"7"},{"size":7199,"mtime":1611015076387,"results":"10","hashOfConfig":"7"},{"size":9055,"mtime":1611029758499,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"17vnjfn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"C:\\Users\\zacso\\documents\\algo-vis\\src\\index.tsx",[],["27","28"],"C:\\Users\\zacso\\documents\\algo-vis\\src\\reportWebVitals.ts",[],"C:\\Users\\zacso\\documents\\algo-vis\\src\\App.tsx",["29","30","31","32","33","34","35","36","37","38","39"],"import React, { useState } from 'react';\nimport logo from './logo.svg';\n// import { bubbleSortTemp } from './SortingVisualizer/SortingVisualizer.tsx';\n// import './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, ButtonGroup, Navbar, ToggleButton, Nav } from 'react-bootstrap';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nvar arr = []\n\n// function printSortedArray(){\n//   var arr: number[] = []\n//   arr = generateArr(arr, 10)\n//   // var arr = [0,1,2,4,6,3,7,8,9]\n//   arr = bubbleSort(arr)\n//   for(var i = 0; i < arr.length; i++){\n//     console.log(i +\": \" +arr[i])\n//   }\n// }\n\nfunction App() {\n\n  const radios = [\n    { name: 'Bubble Sort', value: '1' },\n    { name: 'Insertion Sort', value: '2' },\n    { name: 'Selection Sort', value: '3' },\n    { name: 'Merge Sort', value: '4' },\n    { name: 'Heap Sort', value: '5' },\n    { name: 'Quick Sort', value: '6' },\n  ];\n  const [radioValue, setRadioValue] = useState('1');\n  var sort = <SortingVisualizer />;\n  return (\n    <div>\n      {/* <Navbar bg=\"dark\" variant=\"dark\" >\n        <Navbar.Brand href=\"\">Sorting Algo Visualizer</Navbar.Brand>\n        <ButtonGroup toggle>\n          {radios.map((radio, idx) => (\n            <ToggleButton\n              key={idx}\n              type=\"radio\"\n              variant=\"secondary\"\n              name=\"radio\"\n              value={radio.value}\n              checked={radioValue === radio.value}\n              onChange={(e) => setRadioValue(e.currentTarget.value)}\n            >\n              {radio.name}\n            </ToggleButton>\n          ))}\n        </ButtonGroup>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav>\n            <Button variant=\"outline-light\" className=\"mr-2\" onClick = {\n              () => {\n                console.log(\"New array being generated\")\n              }\n            }>New Array</Button>\n\n            <Button variant=\"outline-light\" onClick = {\n              () => {\n                if (radioValue === '1') {\n                  console.log('Bubble Sort')\n                } else if (radioValue === '2') {\n                  console.log('Insertion Sort')\n                } else if (radioValue === '3') {\n                  console.log('Selection Sort')\n                } else if (radioValue === '4') {\n                  console.log('Merge Sort')\n                } else if (radioValue === '5') {\n                  console.log('Heap Sort')\n                } else if (radioValue === '6') {\n                  console.log('Quick Sort')\n                }\n              }\n            }>Sort</Button>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar> */}\n      <SortingVisualizer/>\n      </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\zacso\\documents\\algo-vis\\src\\algo.ts",["40"],"export function getBubbleSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    bubbleSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getInsertionSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    insertionSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getSelectionSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    selectionSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getMergeSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    mergeSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getHeapSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    heapSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function getQuickSortAnimations(arr: number[]) {\r\n    var animations:any = []\r\n    quickSort(arr, animations)\r\n    return animations\r\n}\r\n\r\nexport function bubbleSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for (var i = 0; i < length-1; i++){\r\n        for (var j = 0; j < (length-1-i); j++) {\r\n            // animations.push([j,j])\r\n            // animations.push([j,j+1])\r\n            if (arr[j] > arr[j+1]) {\r\n                animations.push([j ,arr[j+1]])\r\n                animations.push([j+1 ,arr[j]])\r\n                var temp = arr[j]\r\n                arr[j] = arr[j+1]\r\n                arr[j+1] = temp\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function insertionSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for (var i = 1; i < length; i++) {\r\n        const current = arr[i]\r\n        let j = i - 1\r\n        while ((j > -1) && (current < arr[j])) {\r\n            animations.push([j+1, arr[j]])\r\n            arr[j+1] = arr[j];\r\n            j--;\r\n        }\r\n        arr[j+1] = current;\r\n        animations.push([j+1, current])\r\n    }\r\n    return arr;\r\n\r\n}\r\n\r\nexport function selectionSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    for(var i = 0; i < length; i++) {\r\n        let smallIndex = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(arr[j] < arr[smallIndex]) {\r\n                smallIndex=j;\r\n            }\r\n         }\r\n        if (smallIndex !== i) {\r\n            // Swapping the elements\r\n            animations.push([i ,arr[smallIndex]])\r\n            animations.push([smallIndex ,arr[i]])\r\n            let tmp = arr[i];\r\n            arr[i] = arr[smallIndex];\r\n            arr[smallIndex] = tmp;\r\n       }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport function mergeSort(arr: number[], animations: any){\r\n    var length = arr.length\r\n    var extraArr = arr.slice()\r\n    mergeHelper(arr, 0, length - 1, extraArr, animations)\r\n    return animations\r\n}\r\n\r\nfunction mergeHelper(arr: number[], startIndex: number, endIndex: number, extraArr: number[], animations: any) {\r\n    if(startIndex === endIndex) { return }\r\n    const halfIndex = Math.floor((startIndex + endIndex) / 2)\r\n    mergeHelper(extraArr, startIndex, halfIndex, arr, animations)\r\n    mergeHelper(extraArr, halfIndex+ 1, endIndex, arr, animations)\r\n    merge(arr, startIndex, halfIndex, endIndex, extraArr, animations)\r\n}\r\n\r\nfunction merge(arr: number[], startIndex: number, middleIndex: number, endIndex: number, extraArr: number[], animations: any) {\r\n    var k = startIndex, i = startIndex, j = middleIndex + 1\r\n    while (i <= middleIndex && j <= endIndex) {\r\n        if(extraArr[i] <= extraArr[j]) {\r\n            animations.push([k, extraArr[i]])\r\n            arr[k++] = extraArr[i++]\r\n        } else {\r\n            animations.push([k, extraArr[j]])\r\n            arr[k++] = extraArr[j++]\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([k, extraArr[i]])\r\n        arr[k++] = extraArr[i++]\r\n    }\r\n    while (j <= endIndex) {\r\n        animations.push([k, extraArr[j]])\r\n        arr[k++] = extraArr[j++]\r\n    }\r\n}\r\n\r\n// function merge(arr: number[], index1Start: number, index1End: number, index2Start: number, index2End: number, extraArr: number[], animations: number[]) {\r\n//     var newArr = []\r\n//     var k1 = index1Start, k2 = index2Start, k3 = 0\r\n//     while (k1 <= index1End && k2 <= index2End) {\r\n//         var temp = 0\r\n//         if(arr[k1] <= arr[k2]) {\r\n//             temp = arr[k1]\r\n//             k1++\r\n//         } else {\r\n//             temp = arr[k2]\r\n//             k2++\r\n//         }\r\n//         newArr[k3] = temp\r\n//         k3++\r\n//     }\r\n//     while(k2 <= index2End) {\r\n//         newArr.push(arr[k2])\r\n//         k2++\r\n//     }\r\n//     while (k1 <= index1End) {\r\n//         newArr.push(arr[k1])\r\n//         k1++\r\n//     }\r\n//     console.log(\"merged: \" + newArr)\r\n// }\r\n\r\nexport function heapSort(arr: number[], animations: any){\r\n    var n = arr.length\r\n    for(var i = n/2-1; i >= 0; i--) {\r\n        heapify(arr, n, i, animations)\r\n    }\r\n\r\n    for (var k = n - 1; k >= 0; k--) {\r\n        animations.push([0, arr[k]])\r\n        animations.push([k, arr[0]])\r\n        var temp = arr[0]\r\n        arr[0] = arr[k]\r\n        arr[k] = temp\r\n\r\n        heapify(arr, k, 0, animations)\r\n    }\r\n    return arr\r\n}\r\n\r\nfunction heapify(arr: number[], n: number, i: number, animations: any) {\r\n    var largest = i\r\n    var left = 2 * i + 1\r\n    var right = 2 * i + 2\r\n\r\n    if (left < n && arr[largest] < arr[left]) {\r\n        largest = left\r\n    }\r\n     if (right < n && arr[largest] < arr[right]) {\r\n        largest = right\r\n     }\r\n     if (largest !== i) {\r\n        animations.push([largest, arr[i]])\r\n        animations.push([i, arr[largest]])\r\n        var temp = arr[i]\r\n        arr[i] = arr[largest]\r\n        arr[largest] = temp\r\n\r\n        heapify(arr, n, largest, animations)\r\n     }\r\n}\r\n\r\nexport function quickSort(arr: number[], animations: any) {\r\n    var length = arr.length\r\n    quickHelper(arr, 0, length - 1, animations)\r\n    return arr\r\n}\r\n\r\nfunction quickHelper(arr: number[], low: number, high: number, animations: any) {\r\n    if(low < high) {\r\n        var pi = partition(arr, low, high, animations)\r\n        quickHelper(arr, low, pi - 1, animations)\r\n        quickHelper(arr, pi + 1, high, animations)\r\n    }\r\n}\r\n\r\nfunction partition(arr: number[], low: number, high: number, animations: any) {\r\n    var pivot = arr[high]\r\n    var smallerIndex = (low - 1)\r\n\r\n    for(var i = low; i < high ; i++) {\r\n        if(arr[i] < pivot) {\r\n            smallerIndex++\r\n            animations.push([smallerIndex, arr[i]])\r\n            animations.push([i, arr[smallerIndex]])\r\n            var temp = arr[smallerIndex]\r\n            arr[smallerIndex] = arr[i]\r\n            arr[i] = temp\r\n        }\r\n    }\r\n    animations.push([smallerIndex + 1, arr[high]])\r\n    animations.push([high, arr[smallerIndex + 1]])\r\n    var temp2 = arr[smallerIndex + 1]\r\n    arr[smallerIndex + 1] = arr[high]\r\n    arr[high] = temp2\r\n    return (smallerIndex + 1)\r\n}\r\n\r\nfunction getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction randomNumber(min: number, max: number) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function generateArr(arr: number[],numOfElements: number){\r\n    for(var i = 0; i < numOfElements; i ++) {\r\n        arr[i] = getRandomInt(700)\r\n    }\r\n    return arr\r\n}\r\n",["41","42"],"C:\\Users\\zacso\\documents\\algo-vis\\src\\SortingVisualizer\\SortingVisualizer.tsx",["43","44","45","46","47","48","49","50","51","52","53"],"import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport { Button, ButtonGroup, Navbar, ToggleButton } from 'react-bootstrap';\r\nimport { bubbleSort, getBubbleSortAnimations, getInsertionSortAnimations, getSelectionSortAnimations, insertionSort, selectionSort,getMergeSortAnimations, getHeapSortAnimations, getQuickSortAnimations, mergeSort, quickSort, heapSort } from '../algo';\r\nimport './SortingVisualizer.css';\r\nimport Slider from 'react-rangeslider';\r\n\r\ninterface state {\r\n  arr: number[]\r\n  selectedSort: number\r\n}\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nvar NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component <{}, state> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      arr: [],\r\n      selectedSort: 1\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateArr()\r\n  }\r\n\r\n  generateArr(){\r\n    const arr = []\r\n    for(var i = 0; i < NUMBER_OF_ARRAY_BARS; i ++) {\r\n        arr.push(getRandomInt(5, 600))\r\n    }\r\n    this.setState({arr})\r\n  }\r\n\r\n  testSortingAlgos(){\r\n    for(var i = 0; i < 100; i++) {\r\n      var tempArr = []\r\n      for(var j = 0; j < 1000; j ++) {\r\n        tempArr.push(getRandomInt(5, 600))\r\n      }\r\n      const bubbleTest = bubbleSort(tempArr, [])\r\n      const insertionTest = insertionSort(tempArr, [])\r\n      const selectionTest = selectionSort(tempArr, [])\r\n      const mergeTest = mergeSort(tempArr, [])\r\n      const heapTest = heapSort(tempArr, [])\r\n      const quickTest = quickSort(tempArr, [])\r\n      const tsSort = tempArr.sort()\r\n      if(this.arraysEqual(tsSort, insertionTest) && this.arraysEqual(tsSort, bubbleTest) && this.arraysEqual(tsSort, selectionTest) && this.arraysEqual(tsSort, mergeTest) && this.arraysEqual(tsSort, heapTest)  && this.arraysEqual(tsSort, quickTest)) {\r\n        console.log(\"All algorithms are working\")\r\n      } else {\r\n        console.log(\"Something went wrong :(\")\r\n      }\r\n    }\r\n    console.log(\"Done Testing\")\r\n  }\r\n\r\n  print(arr: Number[]){\r\n    var str =\"\"\r\n    for(var i = 0; i < arr.length; i++){\r\n      str += \", \" + arr[i]\r\n    }\r\n    console.log(str)\r\n  }\r\n\r\n  arraysEqual(a: number[], b: number[]) {\r\n    if (a === b) return true;\r\n    if (a == null || b == null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (var i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  bubbleSort() {\r\n    var animations = getBubbleSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      // const isColorChange = i % 3 !== 2;\r\n      // if (isColorChange) {\r\n      //   const [barOneIdx, barTwoIdx] = animations[i];\r\n      //   var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n      //   var barTwoStyle = arrayBars[barTwoIdx] as HTMLElement;\r\n      //   const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n      //   setTimeout(() => {\r\n      //     barOneStyle.style.backgroundColor = color;\r\n      //     barTwoStyle.style.backgroundColor = color;\r\n      //   }, i * ANIMATION_SPEED_MS);\r\n      // } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n          barOneStyle.style.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      // }\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  insertionSort() {\r\n    var animations = getInsertionSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  selectionSort() {\r\n    var animations = getSelectionSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  mergeSort() {\r\n    var animations = getMergeSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  heapSort() {\r\n    var animations = getHeapSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  quickSort() {\r\n    var animations = getQuickSortAnimations(this.state.arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      var arrayBars = document.getElementsByClassName('array-bar');\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        var barOneStyle = arrayBars[barOneIdx] as HTMLElement;\r\n        barOneStyle.style.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    console.log(\"Done Sorting\")\r\n  }\r\n\r\n  render() {\r\n    const {arr} = this.state;\r\n    var checked = 1\r\n\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"\">Sorting Algo Visualizer</Navbar.Brand>\r\n          <ButtonGroup toggle className=\"mr-auto\">\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 1})}} type=\"radio\" checked={this.state.selectedSort === 1} variant=\"outline-light\" value={1}>\r\n              Bubble Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 2})}} type=\"radio\" checked={this.state.selectedSort === 2} variant=\"outline-light\" value={2}>\r\n              Selection Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 3})}} type=\"radio\" checked={this.state.selectedSort === 3} variant=\"outline-light\" value={3}>\r\n              Insertion Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 4})}} type=\"radio\" checked={this.state.selectedSort === 4} variant=\"outline-light\" value={4}>\r\n              Merge Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 5})}} type=\"radio\" checked={this.state.selectedSort === 5} variant=\"outline-light\" value={5}>\r\n              Heap Sort\r\n            </ToggleButton>\r\n            <ToggleButton onClick={() => {this.setState({selectedSort: 6})}} type=\"radio\" checked={this.state.selectedSort === 6} variant=\"outline-light\" value={6}>\r\n              Quick Sort\r\n            </ToggleButton>\r\n          </ButtonGroup>\r\n          <Button variant=\"outline-light\" className=\"mr-2\" onClick = {() => this.generateArr()}>New Array</Button>\r\n          <Button variant=\"outline-light\" onClick = {() => {\r\n            if (this.state.selectedSort === 1) {\r\n              this.bubbleSort()\r\n            } else if (this.state.selectedSort === 2) {\r\n              this.selectionSort()\r\n            } else if (this.state.selectedSort === 3) {\r\n              this.insertionSort()\r\n            } else if (this.state.selectedSort === 4) {\r\n              this.mergeSort()\r\n            } else if (this.state.selectedSort === 5) {\r\n              this.heapSort()\r\n            } else if (this.state.selectedSort === 6) {\r\n              this.quickSort()\r\n            }\r\n          }}>Sort</Button>\r\n        </Navbar>\r\n        <div className=\"array-container\">\r\n          {\r\n            arr.map((value, index) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={index}\r\n                  style={{height: `${value}px`}}\r\n                ></div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":6,"column":10,"nodeType":"60","messageId":"61","endLine":6,"endColumn":16},{"ruleId":"58","severity":1,"message":"63","line":6,"column":18,"nodeType":"60","messageId":"61","endLine":6,"endColumn":29},{"ruleId":"58","severity":1,"message":"64","line":6,"column":31,"nodeType":"60","messageId":"61","endLine":6,"endColumn":37},{"ruleId":"58","severity":1,"message":"65","line":6,"column":39,"nodeType":"60","messageId":"61","endLine":6,"endColumn":51},{"ruleId":"58","severity":1,"message":"66","line":6,"column":53,"nodeType":"60","messageId":"61","endLine":6,"endColumn":56},{"ruleId":"58","severity":1,"message":"67","line":9,"column":5,"nodeType":"60","messageId":"61","endLine":9,"endColumn":8},{"ruleId":"58","severity":1,"message":"68","line":23,"column":9,"nodeType":"60","messageId":"61","endLine":23,"endColumn":15},{"ruleId":"58","severity":1,"message":"69","line":31,"column":10,"nodeType":"60","messageId":"61","endLine":31,"endColumn":20},{"ruleId":"58","severity":1,"message":"70","line":31,"column":22,"nodeType":"60","messageId":"61","endLine":31,"endColumn":35},{"ruleId":"58","severity":1,"message":"71","line":32,"column":7,"nodeType":"60","messageId":"61","endLine":32,"endColumn":11},{"ruleId":"58","severity":1,"message":"72","line":234,"column":10,"nodeType":"60","messageId":"61","endLine":234,"endColumn":22},{"ruleId":"54","replacedBy":"73"},{"ruleId":"56","replacedBy":"74"},{"ruleId":"58","severity":1,"message":"75","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":16},{"ruleId":"58","severity":1,"message":"76","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":14},{"ruleId":"58","severity":1,"message":"77","line":20,"column":7,"nodeType":"60","messageId":"61","endLine":20,"endColumn":20},{"ruleId":"58","severity":1,"message":"78","line":23,"column":7,"nodeType":"60","messageId":"61","endLine":23,"endColumn":22},{"ruleId":"79","severity":1,"message":"80","line":102,"column":20,"nodeType":"81","messageId":"82","endLine":106,"endColumn":10},{"ruleId":"79","severity":1,"message":"80","line":116,"column":18,"nodeType":"81","messageId":"82","endLine":120,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":129,"column":18,"nodeType":"81","messageId":"82","endLine":133,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":142,"column":18,"nodeType":"81","messageId":"82","endLine":146,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":155,"column":18,"nodeType":"81","messageId":"82","endLine":159,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":168,"column":18,"nodeType":"81","messageId":"82","endLine":172,"endColumn":8},{"ruleId":"58","severity":1,"message":"83","line":179,"column":9,"nodeType":"60","messageId":"61","endLine":179,"endColumn":16},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Navbar' is defined but never used.","'ToggleButton' is defined but never used.","'Nav' is defined but never used.","'arr' is assigned a value but never used.","'radios' is assigned a value but never used.","'radioValue' is assigned a value but never used.","'setRadioValue' is assigned a value but never used.","'sort' is assigned a value but never used.","'randomNumber' is defined but never used.",["84"],["85"],"'render' is defined but never used.","'Slider' is defined but never used.","'PRIMARY_COLOR' is assigned a value but never used.","'SECONDARY_COLOR' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'arrayBars'.","ArrowFunctionExpression","unsafeRefs","'checked' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]